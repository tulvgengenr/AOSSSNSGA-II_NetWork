package hh.problem.rwa;


public class Network {
	public static final int[][] NSFNET= { {0,1,2,3,0,0,0,0,0,0,0,0,0,0},
										  {1,0,0,4,0,0,5,0,0,0,0,0,0,0},
										  {2,0,0,0,6,0,0,7,0,0,0,0,0,0},
										  {3,4,0,0,0,0,0,0,0,0,8,0,0,0},
										  {0,0,6,0,0,9,0,0,0,0,10,0,0,0},
										  {0,0,0,0,9,0,11,0,0,0,0,0,0,0},
										  {0,5,0,0,0,11,0,0,0,12,0,0,0,0},
										  {0,0,7,0,0,0,0,0,13,0,0,0,0,14},
										  {0,0,0,0,0,0,0,13,0,15,0,0,16,0},
										  {0,0,0,0,0,0,12,0,15,0,0,17,0,18},
										  {0,0,0,8,10,0,0,0,0,0,0,19,20,0},
										  {0,0,0,0,0,0,0,0,0,17,19,0,0,0},
										  {0,0,0,0,0,0,0,0,16,0,20,0,0,21},
										  {0,0,0,0,0,0,0,14,0,18,0,0,21,0}};
	
	public static final int[][] AvailbleBandwith=   {{0,1256,1260,1257,0,0,0,0,0,0,0,0,0,0},
													 {1256,0,0,1256,0,0,1272,0,0,0,0,0,0,0},
													 {1260,0,0,0,1262,0,0,1275,0,0,0,0,0,0},
													 {1257,1256,0,0,0,0,0,0,0,0,1265,0,0,0},
													 {0,0,1262,0,0,1252,0,0,0,0,1268,0,0,0},
													 {0,0,0,0,1252,0,1263,0,0,0,0,0,0,0},
													 {0,1272,0,0,0,1263,0,0,0,1275,0,0,0,0},
													 {0,0,1275,0,0,0,0,0,1267,0,0,0,0,1278},
													 {0,0,0,0,0,0,0,1267,0,1276,0,0,1260,0},
													 {0,0,0,0,0,0,1275,0,1276,0,0,1268,0,1256},
													 {0,0,0,1265,1268,0,0,0,0,0,0,1278,1260,0},
													 {0,0,0,0,0,0,0,0,0,1268,1278,0,0,0},
													 {0,0,0,0,0,0,0,0,1260,0,1260,0,0,1267},
													 {0,0,0,0,0,0,0,1278,0,1256,0,0,1267,0}};
	
	public static final int[][] delay= { {0,2,5,3,0,0,0,0,0,0,0,0,0,0},
			  							 {2,0,0,3,0,0,4,0,0,0,0,0,0,0},
			  							 {5,0,0,0,3,0,0,5,0,0,0,0,0,0},
			  							 {3,3,0,0,0,0,0,0,0,0,2,0,0,0},
			  							 {0,0,3,0,0,1,0,0,0,0,5,0,0,0},
			  							 {0,0,0,0,1,0,4,0,0,0,0,0,0,0},
										 {0,4,0,0,0,4,0,0,0,4,0,0,0,0},
										 {0,0,5,0,0,0,0,0,3,0,0,0,0,5},
										 {0,0,0,0,0,0,0,3,0,2,0,0,1,0},
										 {0,0,0,0,0,0,4,0,2,0,0,1,0,2},
										 {0,0,0,2,5,0,0,0,0,0,0,1,3,0},
										 {0,0,0,0,0,0,0,0,0,1,1,0,0,0},
										 {0,0,0,0,0,0,0,0,1,0,3,0,0,5},
										 {0,0,0,0,0,0,0,5,0,2,0,0,5,0}};
	
	public static final double[][] PL= {  {0.0,0.1650,0.2850,0.3140,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
			  							  {0.1650,0.0,0.0,0.4020,0.0,0.0,0.3800,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
										  {0.2850,0.0,0.0,0.0,0.2850,0.0,0.0,0.2280,0.0,0.0,0.0,0.0,0.0,0.0},
										  {0.3140,0.4020,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1460,0.0,0.0,0.0},
										  {0.0,0.0,0.1090,0.0,0.0,0.3060,0.0,0.0,0.0,0.0,0.2750,0.0,0.0,0.0},
										  {0.0,0.0,0.0,0.0,0.3060,0.0,0.2840,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
										  {0.0,0.3800,0.0,0.0,0.0,0.2840,0.0,0.0,0.0,0.0810,0.0,0.0,0.0,0.0},
										  {0.0,0.0,0.2280,0.0,0.0,0.0,0.0,0.0,0.3690,0.0,0.0,0.0,0.0,0.1020},
										  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.3690,0.0,0.3990,0.0,0.0,0.4890,0.0},
										  {0.0,0.0,0.0,0.0,0.0,0.0,0.0810,0.0,0.3990,0.0,0.0,0.2640,0.0,0.1750},
										  {0.0,0.0,0.0,0.1460,0.2750,0.0,0.0,0.0,0.0,0.0,0.0,0.4100,0.3360,0.0},
										  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2640,0.4100,0.0,0.0,0.0},
										  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4890,0.0,0.3360,0.0,0.0,0.1780},
										  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1020,0.0,0.1750,0.0,0.0,0.1780,0.0}};
	
   
	public static final int[] Lambda={85,90,95,100,105,110,115,120,125,130};
	
	public static final int[][] A ={{3,0,3,0,0,1,2,0,1,0},
									{0,1,3,1,2,0,1,2,0,0},
									{0,0,2,0,0,0,0,2,3,3},
									{0,0,0,3,0,3,4,0,0,0},
									{0,0,1,0,2,0,3,0,1,3},
									{0,1,0,1,1,2,3,0,2,0},
									{0,0,1,0,1,0,3,2,3,0},
									{1,0,0,2,0,2,0,3,1,1},
									{2,2,3,0,1,0,1,1,0,0},
									{0,2,3,2,0,0,1,2,0,0},
									{0,0,0,1,2,3,4,0,0,0},
									{0,0,0,0,1,2,3,4,0,0},
									{0,0,0,0,0,1,2,3,4,0},
									{0,0,0,0,0,0,1,2,3,4},
									{0,0,2,2,2,4,0,0,0,0},
									{1,0,1,2,3,1,2,0,0,0},
									{0,1,4,1,0,0,2,0,2,0},
									{0,0,2,0,1,0,4,0,4,0},
									{1,0,3,0,0,2,0,2,0,2},
									{3,0,2,0,3,0,2,0,0,0},
									{1,0,0,3,1,0,3,0,2,0}};
	
	public static final int[][] B ={{80,0,80,0,0,100,90,0,100,0},
									{0,100,80,100,90,0,100,90,0,0},
									{0,0,90,0,0,0,0,90,80,80},
									{0,0,0,80,0,80,70,0,0,0},
									{0,0,100,0,90,0,80,0,100,80},
									{0,100,0,100,100,90,80,0,90,0},
									{0,0,100,0,100,0,80,90,80,0},
									{100,0,0,90,0,90,0,80,100,100},
									{90,90,80,0,100,0,100,100,0,0},
									{0,90,80,90,0,0,100,90,0,0},
									{0,0,0,100,90,80,70,0,0,0},
									{0,0,0,0,100,90,80,70,0,0},
									{0,0,0,0,0,100,90,80,70,0},
									{0,0,0,0,0,0,100,90,80,70},
									{0,0,90,90,90,70,0,0,0,0},
									{100,0,100,90,80,100,90,0,0,0},
									{0,100,70,100,0,0,90,0,90,0},
									{0,0,90,0,100,0,70,0,70,0},
									{100,0,80,0,0,90,0,90,0,90},
									{80,0,90,0,80,0,90,0,0,0},
									{100,0,0,80,100,0,80,0,90,0}};
	public static final int[][] C ={{0,34,20,78,109,105,32,74,62,114},
	                                {34,0,107,105,119,41,40,64,40,93},
	                                {20,107,0,94,97,75,34,32,115,94},
	                                {78,105,94,0,78,83,39,69,28,26},
	                                {109,119,97,78,0,23,24,106,30,106},
	                                {105,41,75,83,23,0,84,108,34,114},
	                                {32,40,34,39,24,84,0,47,36,119},
	                                {74,64,32,69,106,108,47,0,82,106},
	                                {62,40,115,28,30,34,36,82,0,99},
	                                {114,93,94,26,106,114,119,106,99,0}}; 

	public double[] findMax_Min(double[][] m){
		double[] max_min=new double[2];
 		double max = m[0][0];
		double min = m[0][0];
		for (int i=0;i<m.length;i++){
			for(int j=0;j<m[i].length;j++){
				if(m[i][j]>max){
					max = m[i][j];
				}
				if(m[i][j]<min){
					min = m[i][j];
				}
			}
		}
		max_min[0]=max;
		max_min[1]=min;
		return max_min;
	}
	
	public int[] findMax_Min(int[][] m){
		int[] max_min=new int[2];
 		int max = m[0][0];
		int min = m[0][0];
		for (int i=0;i<m.length;i++){
			for(int j=0;j<m[i].length;j++){
				if(m[i][j]>max){
					max = m[i][j];
				}
				if(m[i][j]<min){
					min = m[i][j];
				}
			}
		}
		max_min[0]=max;
		max_min[1]=min;
		return max_min;
	}


	public double[][] normalization(double[][] m){
		double[] max_min = findMax_Min(m);
		double[][] result = new double[m.length][m.length];
		for(int i=0;i<m.length;i++){
			for(int j=0;j<m[i].length;j++){
				result[i][j] = (m[i][j]-max_min[1])/(max_min[0]-max_min[1]);
			}
		}
		return result;
	}
	
	public double[][] normalization(int[][] m){
		int[] max_min = findMax_Min(m);
		double[][] result = new double[m.length][m.length];
		for(int i=0;i<m.length;i++){
			for(int j=0;j<m[i].length;j++){
				result[i][j] = ((double)m[i][j]-max_min[1])/(max_min[0]-max_min[1]);
			}
		}
		return result;
	}

	public double[][] AvailbleBandwithNorm = null;
	public double[][] DealyNorm = null;
	public double[][] PLNorm = null;
	public double[][] Weight = new double[NSFNET.length][NSFNET.length];
	public void getNorm(){
		AvailbleBandwithNorm=normalization(AvailbleBandwith);
		DealyNorm = normalization(delay);
		PLNorm = normalization(PL);
	}
	
	public void BulidWeight(){
		
		for(int i=0;i<AvailbleBandwithNorm.length;i++){
			for(int j=0;j<AvailbleBandwithNorm[i].length;j++){
				Weight[i][j] = AvailbleBandwithNorm[i][j]+DealyNorm[i][j]+PLNorm[i][j];
			}
		}
	}
	
	public Network(){
		getNorm();
		BulidWeight();
	}
	
	public double[][] getAvailbleBandwithNorm() {
		return AvailbleBandwithNorm;
	}
	
	public double[][] getDealyNorm() {
		return DealyNorm;
	}
	
	public double[][] getPLNorm() {
		return PLNorm;
	}
	public double[][] getWeight() {
		return Weight;
	}
	
	public int getTotalLinkNum(){
		int totalnum = 0;
		for(int i=0;i<NSFNET.length;i++){
			for(int j=0;j<NSFNET[i].length;j++){
				totalnum = Math.max(totalnum, NSFNET[i][j]);
			}
		}
		return totalnum;
	}
}

        
        
         
         


        
